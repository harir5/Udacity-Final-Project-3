version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udacity-project-3-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udacity-project-3-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            exit 1
jobs:
  print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            command: |
              cd backend
              npm install
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build
  test-frontend:
        docker:
          - image: circleci/node:13.8.0
        steps:
          - checkout
          - restore_cache:
              keys: [frontend-build]
          - run:
              name: tests for front end
              command: |
                cd frontend
                npm install
                npm run test
  test-backend:
          docker:
            - image: circleci/node:13.8.0
          steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: tests for back end
                command: |
                  cd backend
                  npm install
                  npm run test
  scan-frontend:
        docker:
          - image: circleci/node:13.8.0
        steps:
          - checkout
          - restore_cache:
              keys: [frontend-build]
          - run:
              name: analyze front end vulnerabilities
              command: |
                cd frontend
                npm install
                npm audit fix --audit-level=critical --force
                npm audit --audit-level=critical
  scan-backend:
        docker:
          - image: circleci/node:13.8.0
        steps:
          - checkout
          - restore_cache:
              keys: [backend-build]
          - run:
              name: analyze back end vulnerabilities
              command: |
                cd backend
                npm install
                npm audit fix --audit-level=critical --force
                npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create backend infrastructure with CloudFormation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-project-3 \
              --stack-name "udacity-project-3-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              exit 1
      - run:
          name: Create front end infrastructure with CloudFormation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-project-3 \
              --stack-name "udacity-project-3-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            touch inventory
            echo "[all]" > inventory
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=udacity-project-3" \
            --output text >> inventory
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment           
workflows:
  default:
    jobs:
      - print_hello
      - build-frontend
      - test-frontend:
          requires: [build-frontend]
      - scan-frontend:
          requires: [build-frontend]      
      - build-backend
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend] 
      - deploy-infrastructure