version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udacity-project-3-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udacity-project-3-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration.
    steps:
      - run:
          name: Revert Migrations
          when: on_fail
          command: |
             SUCCESS=$(curl --insecure  https://kvdb.io/Dyv7U1kyD5sFjvcoMyvmem/migration_$\{CIRCLE_WORKFLOW_ID:0:7\})
             if (( $SUCCESS == 1 ));
             then
                cd ~/project/backend
                npm install
                npm run migration:revert
             fi
  
jobs:
  print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            command: |
              cd backend
              npm install
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build
  test-frontend:
        docker:
          - image: circleci/node:13.8.0
        steps:
          - checkout
          - restore_cache:
              keys: [frontend-build]
          - run:
              name: tests for front end
              command: |
                cd frontend
                npm install
                npm run test
  test-backend:
          docker:
            - image: circleci/node:13.8.0
          steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: tests for back end
                command: |
                  cd backend
                  npm install
                  npm run test
  scan-frontend:
        docker:
          - image: circleci/node:13.8.0
        steps:
          - checkout
          - restore_cache:
              keys: [frontend-build]
          - run:
              name: analyze front end vulnerabilities
              command: |
                cd frontend
                npm install
                npm audit fix --audit-level=critical --force
                npm audit --audit-level=critical
  scan-backend:
        docker:
          - image: circleci/node:13.8.0
        steps:
          - checkout
          - restore_cache:
              keys: [backend-build]
          - run:
              name: analyze back end vulnerabilities
              command: |
                cd backend
                npm install
                npm audit fix --audit-level=critical --force
                npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Create backend infrastructure with CloudFormation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-project-3 \
              --stack-name "udacity-project-3-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Create front end infrastructure with CloudFormation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-project-3 \
              --stack-name "udacity-project-3-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
      - run:
          name: print contents of inventory file
          command: |
           cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  configure-infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["06:30:6f:96:25:49:00:aa:58:16:ed:18:f4:cb:02:09"] # SSH Key added
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/  
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations >> migrations_dump.txt
      - run:
          name: Send migration results to kvdb io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            echo "insecure" >> ~/.curlrc
            curl https://kvdb.io/Dyv7U1kyD5sFjvcoMyvmem/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            curl --insecure  https://kvdb.io/Dyv7U1kyD5sFjvcoMyvmem/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}
            fi
      - destroy-environment
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
        user: root
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt -y install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
         fingerprints: ["06:30:6f:96:25:49:00:aa:58:16:ed:18:f4:cb:02:09"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --no-cache nodejs
            apk add --no-cache npm
            apk add --no-cache curl
            pip install awscli

      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            echo "$PWD"
            cd backend
            echo "$PWD"
            npm i
            npm run build
            cd ..
            echo "$PWD"
            tar -C backend -czvf artifact.tar.gz .
            pwd
            ls
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --no-cache nodejs
            apk add --no-cache npm
            apk add --no-cache curl
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Smoke Test Backend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}/api/status"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Smoke Test FrontEnd
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      - revert-migrations
      - destroy-environment
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: CloudFront Deployment Update
          command: |
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople
      - destroy-environment
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: fetch old workflow details
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
      - run:
          name: remove old stacks
          command: |
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"  
            fi
workflows:
  default:
    jobs:
      - print_hello
      - build-frontend
      - test-frontend:
          requires: [build-frontend]
      - scan-frontend:
          requires: [build-frontend]      
      - build-backend
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend] 
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]